# Pipeline variables: https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
stages:
  - test-stage
  - publish
  - deploy

variables:
  DOCKER_IMAGE_NAME_TDV: "tdv-app"

build-frontend:
  image: node
  stage: test-stage
  script:
    - cd frontend/
    - npm install
    - npm run test -- --watchAll=false
    - npm run build
  artifacts:
    paths:
      - "frontend/build/"

test-backend:
  image: node
  stage: test-stage
  script:
    - cd backend/
    - npm install
    - npm run test

build-backend:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      docker build --pull -t "$CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME_TDV:$CI_COMMIT_TAG" .
      docker push "$CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME_TDV:$CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG
  
deploy:
  image: alpine:latest
  stage: deploy
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME_TDV:$CI_COMMIT_TAG"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f tdv-app || true"
    - ssh -i $ID_RSA -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p 4000:4000 --name tdv-app  $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME_TDV:$CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG