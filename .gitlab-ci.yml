# Pipeline variables: https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
stages:
  - build-and-test
  - publish
  - deploy

variables:
  DOCKER_IMAGE_NAME_TDV: "tdv-app"

build-frontend:
  image: node
  stage: build-and-test
  script:
    - cd frontend/
    - npm install
    - npm run lint
    - npm run test-coverage
    - npm run build
  artifacts:
    paths:
      - "frontend/build/"
      - "frontend/coverage/"

test-backend:
  image: node
  stage: build-and-test
  script:
    - cd backend/
    - npm install
    - npm run lint
    - npm run test-coverage
  artifacts:
    paths:
      - "backend/coverage/"

merge-code-coverage:
  image: node
  stage: build-and-test
  needs:
    - build-frontend
    - test-backend
  script:
    - npx istanbul-merge --out merged-coverage.json ./frontend/coverage/coverage-final.json ./backend/coverage/coverage-final.json
    - npx istanbul report --include merged-coverage.json --dir merged-coverage html cobertura clover text
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    paths:
      - "merged-coverage/"
    reports:
      coverage_report:
        coverage_format: cobertura
        path: merged-coverage/cobertura-coverage.xml


# temporary disabled because of rate limit from docker hub --> 100 pulls per 6 hours
#build-docker-container:
#  image: docker:latest
#  needs:
#    - build-frontend
#  stage: build-and-test
#  services:
#    - docker:dind
#  script:
#    - docker build . # verify that build works on main
#  only:
#    - main

publish-docker-container:
  image: docker:latest
  stage: publish
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      docker build --pull -t "$CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME_TDV:$CI_COMMIT_TAG" .
      docker push "$CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME_TDV:$CI_COMMIT_TAG"
  rules:
    - if: $CI_COMMIT_TAG

# Manual from: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-continuous-deployment-pipeline-with-gitlab-on-ubuntu#step-1-creating-the-gitlab-repository
deploy:
  image: alpine:latest
  stage: deploy
  script:
    - chmod og= $ID_RSA
    - apk update && apk add openssh-client
    - ssh -i $ID_RSA -p 22 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY"
    - ssh -i $ID_RSA -p 22 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "cp docker-compose-template docker-compose.yml"
    - ssh -i $ID_RSA -p 22 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "sed -i -e 's/latest/$CI_COMMIT_TAG/g' docker-compose.yml"
    - ssh -i $ID_RSA -p 22 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker compose up -d"
  environment:
    name: production
    url: $SERVER_IP
  tags:
    - prod
  rules:
    - if: $CI_COMMIT_TAG # WARNING: works only for protected tags because ID_RSA is a protected variable